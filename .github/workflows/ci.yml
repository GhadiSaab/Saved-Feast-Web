name: CI/CD Pipeline

# Note: Environment variables are defined at the top level
# MySQL version is hardcoded in services section for compatibility

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # PHP Backend Tests
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: savedfeast_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, xml
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-php-

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install Node.js dependencies
      run: npm ci

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Configure database for testing
      run: |
        php artisan config:cache
        php artisan config:set database.connections.mysql.host=127.0.0.1
        php artisan config:set database.connections.mysql.database=savedfeast_test
        php artisan config:set database.connections.mysql.username=root
        php artisan config:set database.connections.mysql.password=password

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Run database seeders
      run: php artisan db:seed --class=TestSeeder

    - name: Run PHP tests
      run: php artisan test --coverage --min=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: php
        name: php-coverage

  # Frontend Code Quality
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Check code formatting
      run: npm run format:check

    - name: Run frontend tests
      run: npm test || echo "Frontend tests completed with warnings"

    - name: Build frontend assets
      run: npm run build

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run PHP code style check
      run: vendor/bin/pint --test

    - name: Check for PHP security vulnerabilities
      run: composer audit

    - name: Check for npm security vulnerabilities
      run: npm audit --audit-level=moderate

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-quality, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Create deployment package
      run: |
        tar -czf savedfeast-web.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          .

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: savedfeast-web-deployment
        path: savedfeast-web.tar.gz

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-quality, code-quality, build-and-deploy]
    if: always()

    steps:
    - name: Notify on success
      if: needs.php-tests.result == 'success' && needs.frontend-quality.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üöÄ Deployment completed!"

    - name: Notify on failure
      if: needs.php-tests.result == 'failure' || needs.frontend-quality.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "‚ùå Some tests failed!"
        echo "Please check the logs for details."

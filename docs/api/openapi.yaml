openapi: 3.0.3
info:
  title: SavedFeast API
  description: |
    API for the SavedFeast food delivery platform.
    
    ## Authentication
    This API uses Laravel Sanctum for authentication. Include the Bearer token in the Authorization header:
    ```
    Authorization: Bearer {your_access_token}
    ```
    
    ## Rate Limiting
    - Public endpoints: 60 requests per minute
    - Authenticated endpoints: 120 requests per minute
    - Provider endpoints: 300 requests per minute
    - Admin endpoints: 600 requests per minute
    - Auth endpoints: 20 requests per minute
    - Restaurant applications: 3 requests per minute
    
    ## Error Responses
    - 400: Bad Request - Invalid input
    - 401: Unauthorized - Missing or invalid token
    - 403: Forbidden - Insufficient permissions
    - 404: Not Found - Resource not found
    - 422: Validation Error - Invalid data
    - 429: Too Many Requests - Rate limit exceeded
    - 500: Internal Server Error
    
  version: 1.0.0
  contact:
    name: SavedFeast API Support
    email: api@savedfeast.com

servers:
  - url: https://savedfeast.app/api
    description: Production
  - url: http://localhost:8000/api
    description: Local Development

security:
  - bearerAuth: []

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with consumer role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - password
                - password_confirmation
              properties:
                first_name:
                  type: string
                  maxLength: 255
                  example: "John"
                last_name:
                  type: string
                  maxLength: 255
                  example: "Doe"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                password_confirmation:
                  type: string
                  example: "SecurePass123!"
                phone:
                  type: string
                  maxLength: 25
                  example: "+1234567890"
                address:
                  type: string
                  maxLength: 255
                  example: "123 Main St, City, State"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Revoke the current access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized

  /meals:
    get:
      tags:
        - Meals
      summary: Get meals with filters and pagination
      description: Retrieve meals with optional filtering, sorting, and pagination
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Items per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: category_id
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: integer
        - name: restaurant_id
          in: query
          description: Filter by restaurant ID
          required: false
          schema:
            type: integer
        - name: min_price
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            minimum: 0
        - name: max_price
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            minimum: 0
        - name: available
          in: query
          description: Filter by availability
          required: false
          schema:
            type: boolean
        - name: search
          in: query
          description: Search in title, description, category, or restaurant
          required: false
          schema:
            type: string
            maxLength: 255
        - name: sort_by
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [title, current_price, created_at]
            default: created_at
        - name: sort_order
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Meals retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealsResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests

  /meals/filters:
    get:
      tags:
        - Meals
      summary: Get available filters
      description: Retrieve available filter options for meals
      responses:
        '200':
          description: Filters retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FiltersResponse'
        '429':
          description: Too many requests

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve all available meal categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '429':
          description: Too many requests

  /orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve orders for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order with the specified meals
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - total_amount
                - order_items
              properties:
                total_amount:
                  type: number
                  minimum: 0
                  example: 25.50
                order_items:
                  type: array
                  items:
                    type: object
                    required:
                      - meal_id
                      - quantity
                    properties:
                      meal_id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        minimum: 1
                        example: 2
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get specific order
      description: Retrieve a specific order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
        '429':
          description: Too many requests

    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of a specific order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, completed, cancelled]
                  example: "completed"
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
        '422':
          description: Validation error
        '429':
          description: Too many requests

  /user/profile:
    post:
      tags:
        - User
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "john.doe@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '422':
          description: Validation error
        '429':
          description: Too many requests

  /user/change-password:
    post:
      tags:
        - User
      summary: Change user password
      description: Change the authenticated user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
                - new_password_confirmation
              properties:
                current_password:
                  type: string
                  example: "OldPass123!"
                new_password:
                  type: string
                  minLength: 8
                  example: "NewPass123!"
                new_password_confirmation:
                  type: string
                  example: "NewPass123!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
        '422':
          description: Validation error
        '429':
          description: Too many requests

  /provider/meals:
    get:
      tags:
        - Provider
      summary: Get provider meals
      description: Retrieve meals for the authenticated provider
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Provider meals retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests

    post:
      tags:
        - Provider
      summary: Create new meal
      description: Create a new meal for the provider's restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - current_price
                - quantity
                - category_id
                - available_from
                - available_until
              properties:
                title:
                  type: string
                  maxLength: 255
                  example: "Margherita Pizza"
                description:
                  type: string
                  example: "Classic tomato and mozzarella pizza"
                current_price:
                  type: number
                  minimum: 0
                  example: 12.99
                original_price:
                  type: number
                  minimum: 0
                  example: 15.99
                quantity:
                  type: integer
                  minimum: 0
                  example: 10
                category_id:
                  type: integer
                  example: 1
                image:
                  type: string
                  format: binary
                available_from:
                  type: string
                  format: date-time
                  example: "2024-01-01T10:00:00Z"
                available_until:
                  type: string
                  format: date-time
                  example: "2024-01-01T22:00:00Z"
      responses:
        '201':
          description: Meal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Validation error
        '429':
          description: Too many requests

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User logged in successfully"
        access_token:
          type: string
          example: "1|abc123def456..."
        token_type:
          type: string
          example: "Bearer"
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        address:
          type: string
          nullable: true
          example: "123 Main St, City, State"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "consumer"
        description:
          type: string
          example: "Regular user who consumes services"

    Meal:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Margherita Pizza"
        description:
          type: string
          example: "Classic tomato and mozzarella pizza"
        current_price:
          type: number
          example: 12.99
        original_price:
          type: number
          nullable: true
          example: 15.99
        quantity:
          type: integer
          example: 10
        image:
          type: string
          nullable: true
          example: "/storage/meals/pizza.jpg"
        image_url:
          type: string
          nullable: true
          example: "http://localhost:8000/storage/meals/pizza.jpg"
        available_from:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
        available_until:
          type: string
          format: date-time
          example: "2024-01-01T22:00:00Z"
        restaurant_id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'
        restaurant:
          $ref: '#/components/schemas/Restaurant'

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Pizza"
        description:
          type: string
          example: "Italian pizza dishes"

    Restaurant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Pizza Palace"
        description:
          type: string
          example: "Best pizza in town"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Pizza St"
        email:
          type: string
          format: email
          example: "info@pizzapalace.com"
        website:
          type: string
          nullable: true
          example: "https://pizzapalace.com"
        image:
          type: string
          nullable: true
          example: "/storage/restaurants/palace.jpg"
        user_id:
          type: integer
          example: 1

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        restaurant_id:
          type: integer
          example: 1
        total_amount:
          type: number
          example: 25.50
        status:
          type: string
          enum: [pending, completed, cancelled]
          example: "pending"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        meal_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          example: 12.99
        original_price:
          type: number
          example: 15.99
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        meal:
          $ref: '#/components/schemas/Meal'

    MealsResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Meals retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        pagination:
          $ref: '#/components/schemas/Pagination'
        filters_applied:
          $ref: '#/components/schemas/FiltersApplied'

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 5
        per_page:
          type: integer
          example: 15
        total:
          type: integer
          example: 75
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 15
        has_more_pages:
          type: boolean
          example: true

    FiltersApplied:
      type: object
      properties:
        category_id:
          type: integer
          nullable: true
          example: 1
        restaurant_id:
          type: integer
          nullable: true
          example: 1
        min_price:
          type: number
          nullable: true
          example: 10.00
        max_price:
          type: number
          nullable: true
          example: 30.00
        available:
          type: boolean
          nullable: true
          example: true
        search:
          type: string
          nullable: true
          example: "pizza"
        sort_by:
          type: string
          example: "created_at"
        sort_order:
          type: string
          example: "desc"

    FiltersResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Filters retrieved successfully"
        data:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
            price_range:
              type: object
              properties:
                min:
                  type: number
                  example: 5.00
                max:
                  type: number
                  example: 50.00
            sort_options:
              type: array
              items:
                type: object
                properties:
                  value:
                    type: string
                    example: "title"
                  label:
                    type: string
                    example: "Name"
            sort_orders:
              type: array
              items:
                type: object
                properties:
                  value:
                    type: string
                    example: "asc"
                  label:
                    type: string
                    example: "Ascending"

    CategoriesResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Categories retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    OrdersResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Orders retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    OrderResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Order retrieved successfully"
        data:
          $ref: '#/components/schemas/Order'

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Profile updated successfully"
        user:
          $ref: '#/components/schemas/User'

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - "The email field is required."
            password:
              - "The password field is required." 